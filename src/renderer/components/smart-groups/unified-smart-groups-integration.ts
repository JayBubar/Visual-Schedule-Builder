// Complete Smart Groups Integration with UnifiedDataService
// This file provides the enhanced implementRecommendation and lesson plan generation
// fully integrated with your existing unified data structure

import { UnifiedStudent, UnifiedActivity, IEPGoal } from '../../services/unifiedDataService';
import UnifiedDataService from '../../services/unifiedDataService';

// =============================================================================
// ENHANCED IMPLEMENT RECOMMENDATION WITH UNIFIED DATA INTEGRATION
// =============================================================================

export const enhancedImplementRecommendation = async (
  recommendation: SmartGroupRecommendation,
  activeTheme: string,
  setImplementedGroups: React.Dispatch<React.SetStateAction<SmartGroupRecommendation[]>>,
  setRecommendations: React.Dispatch<React.SetStateAction<SmartGroupRecommendation[]>>,
  onRecommendationImplemented?: (rec: SmartGroupRecommendation) => void
): Promise<void> => {
  try {
    console.log('üöÄ Starting Smart Group implementation:', recommendation.groupName);

    // ‚úÖ 1. CREATE ACTIVITY IN UNIFIEDDATASERVICE (ENHANCED)
    const groupActivity: Partial<UnifiedActivity> = {
      name: recommendation.groupName,
      description: `${recommendation.rationale} [Smart Group ID: ${recommendation.id}, Theme: ${activeTheme}, Confidence: ${recommendation.confidence}]`,
      duration: recommendation.recommendedActivity.duration,
      instructions: recommendation.recommendedActivity.implementation,
      materials: recommendation.recommendedActivity.materials,
      category: 'academic',
      isCustom: true
    };

    // Use UnifiedDataService to add the activity
    const createdActivity = UnifiedDataService.addActivity(groupActivity);
    console.log('‚úÖ Activity created in UnifiedDataService:', createdActivity.id);

    // üÜï 2. SCHEDULE INTEGRATION - Save to unified calendar structure
    const scheduleEntry = {
      id: `smart_schedule_${recommendation.id}`,
      type: 'smart-group-session' as const,
      activityId: createdActivity.id,
      title: recommendation.groupName,
      description: `AI-generated ${activeTheme} themed small group`,
      studentIds: recommendation.studentIds,
      duration: recommendation.suggestedScheduling.duration,
      frequency: recommendation.suggestedScheduling.frequency,
      preferredTime: recommendation.suggestedScheduling.preferredTimes[0] || '10:00 AM',
      startDate: new Date().toISOString().split('T')[0],
      endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 days
      isActive: true,
      smartGroupMetadata: {
        recommendationId: recommendation.id,
        confidence: recommendation.confidence,
        theme: activeTheme,
        autoGenerated: true
      }
    };

    // Save to unified calendar system (extend calendar structure)
    const currentData = UnifiedDataService.getUnifiedData();
    if (currentData) {
      // Extend calendar structure to include smart groups
      const extendedCalendar = {
        ...currentData.calendar,
        smartGroups: (currentData.calendar as any).smartGroups || []
      };
      extendedCalendar.smartGroups.push(scheduleEntry);
      
      const updatedData = {
        ...currentData,
        calendar: extendedCalendar
      };
      UnifiedDataService.saveUnifiedData(updatedData);
    }

    console.log('‚úÖ Schedule entry created:', scheduleEntry.id);

    // üÜï 3. IEP DATA COLLECTION INTEGRATION
    const dataCollectionSetup = await setupIEPDataCollection(
      recommendation,
      scheduleEntry,
      activeTheme
    );

    console.log('‚úÖ Data collection setup completed:', dataCollectionSetup.length + ' goals configured');

    // üÜï 4. UPDATE STUDENT RECORDS
    await updateStudentRecordsForSmartGroup(recommendation, createdActivity.id, scheduleEntry.id);

    console.log('‚úÖ Student records updated');

    // üÜï 5. UPDATE UI STATE
    recommendation.teacherApproved = true;
    recommendation.implementationDate = new Date().toISOString();
    recommendation.activityId = createdActivity.id;
    recommendation.scheduleId = scheduleEntry.id;
    
    // Move to implemented groups
    setImplementedGroups(prev => [...prev, recommendation]);
    setRecommendations(prev => prev.filter(r => r.id !== recommendation.id));

    // üÜï 6. SUCCESS NOTIFICATION
    showUnifiedSuccessNotification({
      title: 'üéâ Smart Group Successfully Implemented!',
      message: `"${recommendation.groupName}" has been added to your activity library, schedule, and IEP data collection system.`,
      actions: [
        {
          label: 'View in Activity Library',
          action: () => navigateToActivity(createdActivity.id)
        },
        {
          label: 'Check Schedule',
          action: () => navigateToSchedule(scheduleEntry.id)
        },
        {
          label: 'IEP Data Collection',
          action: () => navigateToIEPDataCollection()
        }
      ]
    });

    // Callback for parent component
    onRecommendationImplemented?.(recommendation);

    console.log('üéØ Smart Group implementation completed successfully!');

  } catch (error) {
    console.error('‚ùå Error implementing Smart Group:', error);
    showUnifiedErrorNotification({
      title: 'Implementation Failed',
      message: 'There was an error implementing this Smart Group. Please try again.',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
    throw error;
  }
};

// =============================================================================
// IEP DATA COLLECTION INTEGRATION
// =============================================================================

const setupIEPDataCollection = async (
  recommendation: SmartGroupRecommendation,
  scheduleEntry: any,
  theme: string
): Promise<any[]> => {
  const dataCollectionConfigs = [];

  for (const iepGoalRef of recommendation.iepGoalsAddressed) {
    const student = UnifiedDataService.getStudent(iepGoalRef.studentId);
    if (!student || !student.iepData) continue;

    const goal = student.iepData.goals?.find(g => g.id === iepGoalRef.goalId);
    if (!goal) continue;

    // Create data collection configuration for this goal
    const dataConfig = {
      id: `smart_data_${recommendation.id}_${goal.id}`,
      studentId: student.id,
      goalId: goal.id,
      activityId: recommendation.activityId,
      scheduleId: scheduleEntry.id,
      smartGroupId: recommendation.id,
      
      // Data collection plan from AI recommendation
      measurementMoments: recommendation.dataCollectionPlan.measurementMoments,
      collectionMethod: recommendation.dataCollectionPlan.collectionMethod,
      successCriteria: recommendation.dataCollectionPlan.successCriteria,
      
      // Schedule-based collection dates
      collectionDates: generateCollectionDates(scheduleEntry),
      
      // Theme and context
      theme: theme,
      groupName: recommendation.groupName,
      
      // Status
      isActive: true,
      createdAt: new Date().toISOString(),
      createdBy: 'smart-groups-ai'
    };

    // Add to student's IEP data collection (extend the structure)
    if (!(student.iepData as any).dataCollectionReminders) {
      (student.iepData as any).dataCollectionReminders = [];
    }
    (student.iepData as any).dataCollectionReminders.push(dataConfig);

    // Update the student in unified data
    UnifiedDataService.updateStudent(student.id, student);

    dataCollectionConfigs.push(dataConfig);
  }

  return dataCollectionConfigs;
};

const generateCollectionDates = (scheduleEntry: any): string[] => {
  const dates = [];
  const startDate = new Date(scheduleEntry.startDate);
  const endDate = new Date(scheduleEntry.endDate);
  
  // Generate collection dates based on frequency
  let currentDate = new Date(startDate);
  const frequencyDays = scheduleEntry.frequency === 'daily' ? 1 : 
                       scheduleEntry.frequency === 'weekly' ? 7 : 14;
  
  while (currentDate <= endDate) {
    dates.push(currentDate.toISOString().split('T')[0]);
    currentDate.setDate(currentDate.getDate() + frequencyDays);
  }
  
  return dates;
};

// =============================================================================
// STUDENT RECORD UPDATES
// =============================================================================

const updateStudentRecordsForSmartGroup = async (
  recommendation: SmartGroupRecommendation,
  activityId: string,
  scheduleId: string
): Promise<void> => {
  for (const studentId of recommendation.studentIds) {
    const student = UnifiedDataService.getStudent(studentId);
    if (!student) continue;

    // Add to student's activity history (extend the student structure)
    if (!(student as any).activityHistory) {
      (student as any).activityHistory = [];
    }
    
    (student as any).activityHistory.push({
      activityId: activityId,
      date: new Date().toISOString().split('T')[0],
      groupType: 'smart-group',
      groupName: recommendation.groupName,
      theme: recommendation.themeConnection?.themeId || 'general',
      confidence: recommendation.confidence,
      iepGoalsAddressed: recommendation.iepGoalsAddressed
        .filter(g => g.studentId === studentId)
        .map(g => g.goalId)
    });

    // Add to student's Smart Groups participation (extend the student structure)
    if (!(student as any).smartGroupsHistory) {
      (student as any).smartGroupsHistory = [];
    }
    
    (student as any).smartGroupsHistory.push({
      recommendationId: recommendation.id,
      groupName: recommendation.groupName,
      implementedDate: new Date().toISOString(),
      scheduleId: scheduleId,
      activityId: activityId,
      confidence: recommendation.confidence,
      outcomes: [], // Will be populated as data is collected
      isActive: true
    });

    // Update the student
    UnifiedDataService.updateStudent(studentId, student);
  }
};

// =============================================================================
// ENHANCED LESSON PLAN GENERATION WITH UNIFIED DATA
// =============================================================================

export const generateUnifiedLessonPlan = async (
  recommendation: SmartGroupRecommendation,
  activeTheme: string,
  selectedGrade: string
): Promise<DetailedLessonPlan> => {
  try {
    console.log('üìù Generating detailed lesson plan with unified data...');

    // Get actual student data from UnifiedDataService
    const students = recommendation.studentIds
      .map(id => UnifiedDataService.getStudent(id))
      .filter(Boolean) as UnifiedStudent[];

    // Get actual IEP goals from unified data
    const actualIEPGoals = students.flatMap(student => 
      student.iepData?.goals?.filter(goal => 
        recommendation.iepGoalsAddressed.some(ref => 
          ref.goalId === goal.id && ref.studentId === student.id
        )
      ) || []
    );

    // Get activity from unified data if it exists
    let baseActivity: UnifiedActivity | undefined;
    if (recommendation.recommendedActivity.activityId) {
      const allActivities = UnifiedDataService.getAllActivities();
      baseActivity = allActivities.find(a => a.id === recommendation.recommendedActivity.activityId);
    }

    const detailedPlan: DetailedLessonPlan = {
      id: `unified_lesson_${recommendation.id}_${Date.now()}`,
      title: `${recommendation.groupName} - Complete Lesson Plan`,
      duration: recommendation.recommendedActivity.duration,
      theme: activeTheme,
      gradeLevel: selectedGrade,
      
      // LEARNING OBJECTIVES (from actual IEP goals)
      objectives: generateUnifiedObjectives(actualIEPGoals, recommendation, students),
      
      // MATERIALS (enhanced with unified activity data)
      materials: generateUnifiedMaterialsList(baseActivity, recommendation, students.length),
      
      // PROCEDURES (personalized for actual students)
      procedures: generateUnifiedProcedures(recommendation, students, activeTheme),
      
      // ASSESSMENTS (aligned to actual IEP goals)
      assessments: generateUnifiedAssessments(actualIEPGoals, recommendation),
      
      // ACCOMMODATIONS (from actual student profiles)
      accommodations: generateUnifiedAccommodations(students),
      
      // EXTENSIONS (based on student abilities)
      extensions: generateUnifiedExtensions(students, activeTheme),
      
      // STANDARDS ALIGNMENT
      standardsAddressed: recommendation.standardsAddressed.map(s => s.standard),
      iepGoalsAddressed: actualIEPGoals,
      
      // PRACTICAL DETAILS
      groupSize: students.length,
      staffRatio: `1:${students.length}`,
      setupInstructions: generateUnifiedSetupInstructions(baseActivity, recommendation),
      cleanupInstructions: generateUnifiedCleanupInstructions(baseActivity),
      
      // DATA COLLECTION (integrated with IEP system)
      dataCollectionPoints: generateUnifiedDataCollectionPoints(actualIEPGoals, recommendation),
      parentCommunication: generateUnifiedParentCommunication(students, recommendation, activeTheme),
      
      // METADATA
      generatedAt: new Date().toISOString(),
      lastModified: new Date().toISOString(),
      templateVersion: '2.0-unified',
      
      // UNIFIED DATA INTEGRATION
      unifiedDataMetadata: {
        studentIds: students.map(s => s.id),
        actualStudentCount: students.length,
        iepGoalIds: actualIEPGoals.map(g => g.id),
        baseActivityId: baseActivity?.id,
        recommendationId: recommendation.id,
        themeId: activeTheme,
        generationSource: 'smart-groups-ai'
      }
    };

    // üÜï SAVE TO UNIFIED LESSON LIBRARY
    await saveToUnifiedLessonLibrary(detailedPlan);

    console.log('‚úÖ Unified lesson plan generated successfully');
    return detailedPlan;

  } catch (error) {
    console.error('‚ùå Error generating unified lesson plan:', error);
    throw new Error('Failed to generate lesson plan with unified data integration');
  }
};

// =============================================================================
// UNIFIED LESSON GENERATION HELPERS
// =============================================================================

const generateUnifiedObjectives = (
  actualGoals: IEPGoal[],
  recommendation: SmartGroupRecommendation,
  students: UnifiedStudent[]
): LessonObjective[] => {
  const objectives: LessonObjective[] = [];
  
  // Academic objectives from actual IEP goals
  actualGoals.forEach((goal, index) => {
    const student = students.find(s => 
      s.iepData?.goals?.some(g => g.id === goal.id)
    );
    
    objectives.push({
      id: `unified_obj_${goal.id}`,
      type: goal.domain as 'academic' | 'behavioral' | 'social',
      description: `Students will demonstrate progress toward: ${goal.description}`,
      measurable: true,
      alignedIEPGoal: goal.id,
      alignedStandard: recommendation.standardsAddressed[0]?.standardId,
      unifiedData: {
        goalId: goal.id,
        studentId: student?.id,
        measurementType: goal.measurementType,
        targetCriteria: goal.targetCriteria
      }
    });
  });
  
  // Universal objectives
  objectives.push({
    id: 'unified_obj_collaboration',
    type: 'social',
    description: `Students will work cooperatively in ${recommendation.groupName} themed activities`,
    measurable: true,
    unifiedData: {
      groupTheme: recommendation.themeConnection?.themeId,
      groupSize: students.length
    }
  });
  
  return objectives;
};

const generateUnifiedAccommodations = (students: UnifiedStudent[]): AccommodationStrategy[] => {
  const accommodationMap = new Map<string, string[]>();
  
  // Collect accommodations from actual student profiles
  students.forEach(student => {
    student.accommodations?.forEach(accommodation => {
      const category = categorizeAccommodation(accommodation);
      if (!accommodationMap.has(category)) {
        accommodationMap.set(category, []);
      }
      accommodationMap.get(category)!.push(accommodation);
    });
  });
  
  // Convert to accommodation strategies
  return Array.from(accommodationMap.entries()).map(([category, strategies]) => ({
    studentType: category,
    strategies: Array.from(new Set(strategies)) // Remove duplicates
  }));
};

const categorizeAccommodation = (accommodation: string): string => {
  const lower = accommodation.toLowerCase();
  if (lower.includes('visual') || lower.includes('picture')) return 'Students requiring visual supports';
  if (lower.includes('break') || lower.includes('movement')) return 'Students needing movement breaks';
  if (lower.includes('time') || lower.includes('processing')) return 'Students needing extended time';
  if (lower.includes('verbal') || lower.includes('repeat')) return 'Students requiring verbal repetition';
  if (lower.includes('sensory')) return 'Students with sensory needs';
  return 'Students with individualized needs';
};

const saveToUnifiedLessonLibrary = async (lessonPlan: DetailedLessonPlan): Promise<void> => {
  const currentData = UnifiedDataService.getUnifiedData();
  if (!currentData) return;

  // Extend the unified data structure to include lesson library
  const extendedData = {
    ...currentData,
    lessonLibrary: (currentData as any).lessonLibrary || []
  };

  // Add lesson plan to unified data
  extendedData.lessonLibrary.push({
    id: lessonPlan.id,
    title: lessonPlan.title,
    theme: lessonPlan.theme,
    gradeLevel: lessonPlan.gradeLevel,
    duration: lessonPlan.duration,
    studentIds: lessonPlan.unifiedDataMetadata?.studentIds || [],
    iepGoalIds: lessonPlan.unifiedDataMetadata?.iepGoalIds || [],
    createdAt: lessonPlan.generatedAt,
    lastModified: lessonPlan.lastModified,
    lessonData: lessonPlan,
    tags: ['smart-groups', 'ai-generated', lessonPlan.theme],
    isActive: true
  });

  // Update metadata (extend metadata structure)
  const extendedMetadata = {
    ...currentData.metadata,
    totalLessonPlans: extendedData.lessonLibrary.length
  };
  extendedData.metadata = extendedMetadata;

  // Save back to unified data
  UnifiedDataService.saveUnifiedData(extendedData);
  console.log('‚úÖ Lesson plan saved to unified library');
};

// =============================================================================
// NAVIGATION HELPERS FOR UNIFIED INTEGRATION
// =============================================================================

const navigateToActivity = (activityId: string) => {
  // This would integrate with your existing navigation system
  console.log('üéØ Navigate to activity in library:', activityId);
  // Example: window.location.hash = `#activities/${activityId}`;
};

const navigateToSchedule = (scheduleId: string) => {
  // Navigate to schedule/calendar view
  console.log('üìÖ Navigate to schedule:', scheduleId);
  // Example: window.location.hash = `#schedule/${scheduleId}`;
};

const navigateToIEPDataCollection = () => {
  // Navigate to IEP data collection interface
  console.log('üìä Navigate to IEP data collection');
  // Example: window.location.hash = '#iep-data-collection';
};

// =============================================================================
// NOTIFICATION SYSTEM INTEGRATION
// =============================================================================

const showUnifiedSuccessNotification = (notification: {
  title: string;
  message: string;
  actions?: Array<{ label: string; action: () => void }>;
}) => {
  // This would integrate with your existing notification system
  console.log('üéâ SUCCESS NOTIFICATION:', notification);
  
  // For now, show browser alert with action options
  let alertMessage = `${notification.title}\n\n${notification.message}`;
  if (notification.actions) {
    alertMessage += '\n\nAvailable actions:';
    notification.actions.forEach((action, index) => {
      alertMessage += `\n${index + 1}. ${action.label}`;
    });
  }
  
  alert(alertMessage);
  
  // If you have a toast/notification system, integrate here:
  // ToastService.showSuccess(notification);
};

const showUnifiedErrorNotification = (notification: {
  title: string;
  message: string;
  error?: string;
}) => {
  console.error('‚ùå ERROR NOTIFICATION:', notification);
  alert(`${notification.title}\n\n${notification.message}${notification.error ? '\n\nError: ' + notification.error : ''}`);
};

// =============================================================================
// TYPE DEFINITIONS FOR UNIFIED INTEGRATION
// =============================================================================

interface LessonObjective {
  id: string;
  type: 'academic' | 'behavioral' | 'social';
  description: string;
  measurable: boolean;
  alignedStandard?: string;
  alignedIEPGoal?: string;
  unifiedData?: {
    goalId?: string;
    studentId?: string;
    measurementType?: string;
    targetCriteria?: string;
    groupTheme?: string;
    groupSize?: number;
  };
}

interface DetailedLessonPlan {
  id: string;
  title: string;
  duration: number;
  theme: string;
  gradeLevel: string;
  objectives: LessonObjective[];
  materials: MaterialItem[];
  procedures: LessonStep[];
  assessments: AssessmentMethod[];
  accommodations: AccommodationStrategy[];
  extensions: ExtensionActivity[];
  standardsAddressed: StateStandard[];
  iepGoalsAddressed: IEPGoal[];
  groupSize: number;
  staffRatio: string;
  setupInstructions: string[];
  cleanupInstructions: string[];
  dataCollectionPoints: DataCollectionPoint[];
  parentCommunication: string;
  generatedAt: string;
  lastModified: string;
  templateVersion: string;
  unifiedDataMetadata?: {
    studentIds: string[];
    actualStudentCount: number;
    iepGoalIds: string[];
    baseActivityId?: string;
    recommendationId: string;
    themeId: string;
    generationSource: string;
  };
}

// =============================================================================
// MISSING TYPE DEFINITIONS AND HELPER FUNCTIONS
// =============================================================================

// Add missing type definitions that are referenced but not defined
interface SmartGroupRecommendation {
  id: string;
  groupName: string;
  rationale: string;
  confidence: number;
  studentIds: string[];
  recommendedActivity: {
    duration: number;
    implementation: string;
    materials: string[];
    activityId?: string;
  };
  standardsAddressed: Array<{
    standardId: string;
    standard: StateStandard;
  }>;
  iepGoalsAddressed: Array<{
    goalId: string;
    studentId: string;
  }>;
  suggestedScheduling: {
    duration: number;
    frequency: string;
    preferredTimes: string[];
  };
  dataCollectionPlan: {
    measurementMoments: string[];
    collectionMethod: string;
    successCriteria: string;
  };
  themeConnection?: {
    themeId: string;
  };
  teacherApproved?: boolean;
  implementationDate?: string;
  activityId?: string;
  scheduleId?: string;
}

interface MaterialItem {
  name: string;
  quantity?: number;
  description?: string;
}

interface LessonStep {
  step: number;
  title: string;
  description: string;
  duration: number;
  materials?: string[];
}

interface AssessmentMethod {
  type: string;
  description: string;
  criteria: string[];
}

interface AccommodationStrategy {
  studentType: string;
  strategies: string[];
}

interface ExtensionActivity {
  title: string;
  description: string;
  difficulty: 'easy' | 'medium' | 'hard';
}

interface StateStandard {
  id: string;
  description: string;
  grade: string;
  subject: string;
}

interface DataCollectionPoint {
  moment: string;
  method: string;
  criteria: string;
}

// Add missing helper functions that are referenced but not implemented
const generateUnifiedMaterialsList = (
  baseActivity: UnifiedActivity | undefined,
  recommendation: SmartGroupRecommendation,
  studentCount: number
): MaterialItem[] => {
  const materials: MaterialItem[] = [];
  
  // Add materials from base activity if available
  if (baseActivity?.materials) {
    baseActivity.materials.forEach(material => {
      materials.push({
        name: material,
        quantity: studentCount,
        description: `From base activity: ${baseActivity.name}`
      });
    });
  }
  
  // Add materials from recommendation
  recommendation.recommendedActivity.materials.forEach(material => {
    materials.push({
      name: material,
      quantity: 1,
      description: 'AI-recommended material'
    });
  });
  
  return materials;
};

const generateUnifiedProcedures = (
  recommendation: SmartGroupRecommendation,
  students: UnifiedStudent[],
  activeTheme: string
): LessonStep[] => {
  return [
    {
      step: 1,
      title: 'Introduction & Setup',
      description: `Welcome students to ${recommendation.groupName}. Review expectations and introduce ${activeTheme} theme.`,
      duration: 5,
      materials: ['Visual schedule', 'Theme materials']
    },
    {
      step: 2,
      title: 'Main Activity',
      description: recommendation.recommendedActivity.implementation,
      duration: recommendation.recommendedActivity.duration - 10,
      materials: recommendation.recommendedActivity.materials
    },
    {
      step: 3,
      title: 'Wrap-up & Reflection',
      description: 'Review learning objectives and collect data on IEP goals.',
      duration: 5,
      materials: ['Data collection sheets']
    }
  ];
};

const generateUnifiedAssessments = (
  actualIEPGoals: IEPGoal[],
  recommendation: SmartGroupRecommendation
): AssessmentMethod[] => {
  const assessments: AssessmentMethod[] = [];
  
  actualIEPGoals.forEach(goal => {
    assessments.push({
      type: goal.measurementType || 'observation',
      description: `Assess progress on: ${goal.description}`,
      criteria: [goal.targetCriteria || 'Student demonstrates skill independently']
    });
  });
  
  return assessments;
};

const generateUnifiedExtensions = (
  students: UnifiedStudent[],
  activeTheme: string
): ExtensionActivity[] => {
  return [
    {
      title: `Advanced ${activeTheme} Challenge`,
      description: 'For students who complete the main activity early',
      difficulty: 'hard'
    },
    {
      title: 'Peer Teaching Opportunity',
      description: 'Students can help others with the activity',
      difficulty: 'medium'
    }
  ];
};

const generateUnifiedSetupInstructions = (
  baseActivity: UnifiedActivity | undefined,
  recommendation: SmartGroupRecommendation
): string[] => {
  const instructions = [
    'Prepare all materials listed above',
    'Set up workspace for small group activity',
    'Review student IEP goals and accommodations'
  ];
  
  if (baseActivity?.instructions) {
    instructions.push(`Follow setup from base activity: ${baseActivity.instructions}`);
  }
  
  return instructions;
};

const generateUnifiedCleanupInstructions = (
  baseActivity: UnifiedActivity | undefined
): string[] => {
  return [
    'Have students help clean up materials',
    'Store reusable materials properly',
    'Complete data collection forms',
    'Update student progress notes'
  ];
};

const generateUnifiedDataCollectionPoints = (
  actualIEPGoals: IEPGoal[],
  recommendation: SmartGroupRecommendation
): DataCollectionPoint[] => {
  return actualIEPGoals.map(goal => ({
    moment: 'During main activity',
    method: goal.measurementType || 'Direct observation',
    criteria: goal.targetCriteria || 'Student demonstrates skill'
  }));
};

const generateUnifiedParentCommunication = (
  students: UnifiedStudent[],
  recommendation: SmartGroupRecommendation,
  activeTheme: string
): string => {
  const studentNames = students.map(s => s.name).join(', ');
  return `Today ${studentNames} participated in "${recommendation.groupName}" - a ${activeTheme} themed small group activity. We worked on specific IEP goals and had great engagement!`;
};

// =============================================================================
// USAGE INSTRUCTIONS FOR SMARTGROUPS.TSX
// =============================================================================

/*
TO INTEGRATE WITH YOUR SMARTGROUPS.TSX:

1. Replace the existing implementRecommendation function with:

const implementRecommendation = async (recommendation: SmartGroupRecommendation) => {
  setIsAnalyzing(true);
  try {
    await enhancedImplementRecommendation(
      recommendation,
      activeTheme,
      setImplementedGroups,
      setRecommendations,
      onRecommendationImplemented
    );
  } catch (error) {
    console.error('Implementation failed:', error);
  } finally {
    setIsAnalyzing(false);
  }
};

2. Replace the lesson plan generation with:

const generateDetailedLesson = async (recommendation: SmartGroupRecommendation) => {
  return await generateUnifiedLessonPlan(recommendation, activeTheme, selectedGrade);
};

3. Import the functions at the top of SmartGroups.tsx:

import { 
  enhancedImplementRecommendation, 
  generateUnifiedLessonPlan 
} from './unified-smart-groups-integration';

This integration will:
- ‚úÖ Use your existing UnifiedDataService architecture
- ‚úÖ Save activities to the unified activity library
- ‚úÖ Integrate with your IEP data collection system
- ‚úÖ Update student records properly
- ‚úÖ Create schedule entries in the unified calendar
- ‚úÖ Generate lesson plans with actual student data
- ‚úÖ Save lesson plans to the unified lesson library
*/
