// Unified Smart Groups Integration
// Enhanced implementation and lesson plan generation with unified data service integration

import UnifiedDataService from '../../services/unifiedDataService';

// Types for the integration
interface SmartGroupRecommendation {
  id: string;
  groupName: string;
  confidence: number;
  studentIds: string[];
  studentCount: number;
  standardsAddressed: any[];
  iepGoalsAddressed: any[];
  recommendedActivity: {
    activityId: string;
    activity: any;
    adaptations: string[];
    duration: number;
    materials: string[];
    setup: string;
    implementation: string;
  };
  themeConnection?: any;
  benefits: string[];
  rationale: string;
  suggestedScheduling: {
    frequency: 'daily' | 'weekly' | 'bi-weekly';
    duration: number;
    preferredTimes: string[];
  };
  dataCollectionPlan: {
    goalIds: string[];
    measurementMoments: string[];
    collectionMethod: string;
    successCriteria: string[];
  };
  generatedAt: string;
  teacherApproved?: boolean;
  implementationDate?: string;
}

// =============================================================================
// ENHANCED IMPLEMENTATION WITH UNIFIED DATA SERVICE
// =============================================================================

export const enhancedImplementRecommendation = async (
  recommendation: SmartGroupRecommendation,
  activeTheme: string,
  setImplementedGroups: (updater: (prev: any[]) => any[]) => void,
  setRecommendations: (updater: (prev: any[]) => any[]) => void,
  onRecommendationImplemented?: (rec: SmartGroupRecommendation) => void
): Promise<void> => {
  try {
    console.log('üöÄ Starting enhanced implementation for:', recommendation.groupName);

    // ‚úÖ 1. CREATE ACTIVITY IN UNIFIED DATA SERVICE
    const groupActivity = {
      id: `smart_group_${recommendation.id}`,
      name: recommendation.groupName,
      category: 'academic' as any,
      description: recommendation.rationale,
      duration: recommendation.recommendedActivity.duration,
      materials: recommendation.recommendedActivity.materials,
      instructions: recommendation.recommendedActivity.implementation,
      isCustom: true,
      dateCreated: new Date().toISOString(),
      // Enhanced metadata for Smart Groups
      linkedGoalIds: recommendation.iepGoalsAddressed.map(g => g.goalId),
      smartGroupData: {
        recommendationId: recommendation.id,
        confidence: recommendation.confidence,
        theme: activeTheme,
        generatedDate: new Date().toISOString(),
        dataCollectionPlan: recommendation.dataCollectionPlan,
        suggestedScheduling: recommendation.suggestedScheduling,
        standardsAddressed: recommendation.standardsAddressed,
        studentIds: recommendation.studentIds
      }
    };

    // Add to unified data service
    UnifiedDataService.addActivity(groupActivity);
    console.log('‚úÖ Activity created in UnifiedDataService:', groupActivity.name);

    // ‚úÖ 2. SCHEDULE INTEGRATION
    const scheduleEntry = {
      id: `schedule_${recommendation.id}`,
      activityId: groupActivity.id,
      groupName: recommendation.groupName,
      studentIds: recommendation.studentIds,
      scheduledTime: recommendation.suggestedScheduling.preferredTimes[0] || '10:00 AM',
      frequency: recommendation.suggestedScheduling.frequency,
      duration: recommendation.suggestedScheduling.duration,
      startDate: new Date().toISOString().split('T')[0],
      status: 'active' as const,
      smartGroupMetadata: {
        recommendationId: recommendation.id,
        autoGenerated: true,
        theme: activeTheme,
        confidence: recommendation.confidence
      }
    };

    // Save to schedule system
    const existingSchedules = JSON.parse(localStorage.getItem('smartGroupSchedules') || '[]');
    existingSchedules.push(scheduleEntry);
    localStorage.setItem('smartGroupSchedules', JSON.stringify(existingSchedules));
    console.log('‚úÖ Schedule entry created:', scheduleEntry.scheduledTime);

    // ‚úÖ 3. DATA COLLECTION SETUP
    const dataCollectionReminders = recommendation.dataCollectionPlan.goalIds.map(goalId => ({
      id: `data_reminder_${recommendation.id}_${goalId}`,
      goalId,
      groupId: recommendation.id,
      groupName: recommendation.groupName,
      measurementMoments: recommendation.dataCollectionPlan.measurementMoments,
      collectionMethod: recommendation.dataCollectionPlan.collectionMethod,
      successCriteria: recommendation.dataCollectionPlan.successCriteria,
      scheduledDates: generateDataCollectionDates(scheduleEntry),
      status: 'pending',
      createdAt: new Date().toISOString(),
      smartGroupMetadata: {
        theme: activeTheme,
        confidence: recommendation.confidence
      }
    }));

    // Save data collection reminders
    const existingReminders = JSON.parse(localStorage.getItem('dataCollectionReminders') || '[]');
    existingReminders.push(...dataCollectionReminders);
    localStorage.setItem('dataCollectionReminders', JSON.stringify(existingReminders));
    console.log('‚úÖ Data collection reminders created:', dataCollectionReminders.length);

    // ‚úÖ 4. UPDATE IEP GOALS WITH ACTIVITY LINKAGE
    recommendation.iepGoalsAddressed.forEach(goalRef => {
      try {
        const student = UnifiedDataService.getStudentById(goalRef.studentId);
        if (student && student.iepData?.goals) {
          const goal = student.iepData.goals.find(g => g.id === goalRef.goalId);
          if (goal) {
            // Add activity reference to goal
            if (!goal.linkedActivityIds) {
              goal.linkedActivityIds = [];
            }
            if (!goal.linkedActivityIds.includes(groupActivity.id)) {
              goal.linkedActivityIds.push(groupActivity.id);
            }
            
            // Update student in unified service
            UnifiedDataService.updateStudent(student.id, student);
            console.log(`‚úÖ Linked activity to IEP goal for ${student.name}`);
          }
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Could not link activity to IEP goal:', error);
      }
    });

    // ‚úÖ 5. UPDATE UI STATE
    recommendation.teacherApproved = true;
    recommendation.implementationDate = new Date().toISOString();
    
    // Move to implemented groups with enhanced data
    const implementedGroup = {
      ...recommendation,
      scheduleEntry,
      dataCollectionReminders,
      activityId: groupActivity.id
    };

    setImplementedGroups(prev => [...prev, implementedGroup]);
    setRecommendations(prev => prev.filter(r => r.id !== recommendation.id));

    // ‚úÖ 6. SUCCESS NOTIFICATION
    showEnhancedSuccessNotification({
      title: 'Smart Group Successfully Implemented! üéâ',
      message: `"${recommendation.groupName}" is now active in your classroom with ${recommendation.studentCount} students.`,
      details: {
        schedule: `${scheduleEntry.frequency} at ${scheduleEntry.scheduledTime}`,
        dataCollection: `${dataCollectionReminders.length} IEP goals being tracked`,
        confidence: `${recommendation.confidence}% AI match confidence`
      },
      actions: [
        { label: 'View in Schedule', action: () => navigateToSchedule(scheduleEntry.id) },
        { label: 'Setup Data Collection', action: () => navigateToDataCollection(recommendation.id) },
        { label: 'Generate Lesson Plan', action: () => generateLessonPlan(recommendation.id) }
      ]
    });

    // Callback for parent component
    onRecommendationImplemented?.(recommendation);

    console.log('üéâ Smart Group implementation complete:', {
      activity: groupActivity.name,
      schedule: scheduleEntry.scheduledTime,
      dataCollection: dataCollectionReminders.length + ' reminders',
      studentsAffected: recommendation.studentCount,
      goalsLinked: recommendation.iepGoalsAddressed.length
    });

  } catch (error) {
    console.error('‚ùå Enhanced implementation failed:', error);
    throw new Error(`Failed to implement Smart Group: ${error.message}`);
  }
};

// =============================================================================
// UNIFIED LESSON PLAN GENERATION
// =============================================================================

export const generateUnifiedLessonPlan = async (
  recommendation: SmartGroupRecommendation,
  activeTheme: string,
  selectedGrade: string
): Promise<any> => {
  try {
    console.log('üìö Generating unified lesson plan for:', recommendation.groupName);

    // Get students from unified data service
    const students = recommendation.studentIds.map(id => 
      UnifiedDataService.getStudentById(id)
    ).filter(Boolean);

    // Enhanced lesson plan with unified data integration
    const lessonPlan = {
      id: `lesson_${recommendation.id}_${Date.now()}`,
      title: `${recommendation.groupName} - Comprehensive Lesson Plan`,
      duration: recommendation.recommendedActivity.duration,
      theme: activeTheme,
      gradeLevel: selectedGrade,
      
      // Enhanced objectives with unified data
      objectives: [
        {
          id: 'obj_academic',
          type: 'academic' as const,
          description: `Students will demonstrate mastery of ${recommendation.standardsAddressed[0]?.standard.title || 'key academic concepts'}`,
          measurable: true,
          alignedStandard: recommendation.standardsAddressed[0]?.standard.code,
          alignedIEPGoal: recommendation.iepGoalsAddressed[0]?.goal.id,
          successCriteria: recommendation.dataCollectionPlan.successCriteria
        },
        ...recommendation.iepGoalsAddressed.map((goalRef, index) => ({
          id: `obj_iep_${index}`,
          type: 'behavioral' as const,
          description: goalRef.goal.shortTermObjective,
          measurable: true,
          alignedIEPGoal: goalRef.goal.id,
          studentSpecific: goalRef.studentId,
          accommodations: recommendation.recommendedActivity.adaptations
        }))
      ],

      // Enhanced materials with unified activity data
      materials: recommendation.recommendedActivity.materials.map((material, index) => ({
        name: material,
        quantity: Math.ceil(recommendation.studentCount / 2), // Smart quantity calculation
        location: 'Classroom Materials Center',
        alternatives: generateMaterialAlternatives(material),
        required: index < 3 // First 3 materials are required
      })),

      // Detailed procedures with unified integration
      procedures: [
        {
          stepNumber: 1,
          phase: 'opening' as const,
          duration: Math.ceil(recommendation.recommendedActivity.duration * 0.15),
          instruction: `Welcome and ${activeTheme} Theme Introduction`,
          teacherActions: [
            'Greet students by name using unified student data',
            `Introduce ${activeTheme} theme with engaging hook`,
            'Review IEP goals and expectations for each student',
            'Set up materials and workspace'
          ],
          studentActions: [
            'Respond to greeting and settle into learning space',
            'Share prior knowledge about theme',
            'Review personal learning goals',
            'Prepare materials for activity'
          ],
          accommodations: recommendation.recommendedActivity.adaptations.slice(0, 2)
        },
        {
          stepNumber: 2,
          phase: 'instruction' as const,
          duration: Math.ceil(recommendation.recommendedActivity.duration * 0.4),
          instruction: 'Core Learning Activity Implementation',
          teacherActions: [
            'Model the activity using unified activity instructions',
            'Provide differentiated instruction based on IEP needs',
            'Monitor progress using data collection plan',
            'Offer real-time feedback and support'
          ],
          studentActions: [
            'Follow along with teacher modeling',
            'Practice skills with peer support',
            'Apply accommodations as needed',
            'Ask questions and seek clarification'
          ],
          accommodations: recommendation.recommendedActivity.adaptations
        },
        {
          stepNumber: 3,
          phase: 'practice' as const,
          duration: Math.ceil(recommendation.recommendedActivity.duration * 0.3),
          instruction: 'Independent and Collaborative Practice',
          teacherActions: [
            'Facilitate independent work time',
            'Collect data on IEP goal progress',
            'Provide targeted interventions',
            'Document observations for unified data system'
          ],
          studentActions: [
            'Work independently on assigned tasks',
            'Collaborate with peers when appropriate',
            'Self-monitor progress using visual supports',
            'Complete practice activities'
          ],
          accommodations: recommendation.recommendedActivity.adaptations
        },
        {
          stepNumber: 4,
          phase: 'closure' as const,
          duration: Math.ceil(recommendation.recommendedActivity.duration * 0.15),
          instruction: 'Review, Reflect, and Preview',
          teacherActions: [
            'Lead group reflection on learning',
            'Review IEP goal progress with students',
            'Preview next session activities',
            'Update unified data system with results'
          ],
          studentActions: [
            'Share learning and reflections',
            'Celebrate progress on personal goals',
            'Ask questions about next steps',
            'Help with cleanup and organization'
          ]
        }
      ],

      // Enhanced assessments with unified data collection
      assessments: [
        {
          type: 'formative' as const,
          method: 'Real-time observation with unified data collection',
          timing: 'during' as const,
          criteria: recommendation.dataCollectionPlan.successCriteria,
          dataCollection: true,
          unifiedIntegration: {
            goalIds: recommendation.dataCollectionPlan.goalIds,
            collectionMethod: recommendation.dataCollectionPlan.collectionMethod,
            measurementMoments: recommendation.dataCollectionPlan.measurementMoments
          }
        },
        {
          type: 'summative' as const,
          method: 'End-of-session progress review',
          timing: 'after' as const,
          criteria: ['Objective completion', 'IEP goal progress', 'Engagement level'],
          dataCollection: true
        }
      ],

      // Student-specific accommodations from unified data
      accommodations: students.map(student => ({
        studentType: `${student.name} - Individual Accommodations`,
        strategies: [
          ...recommendation.recommendedActivity.adaptations,
          ...(student.iepData?.accommodations || []),
          `Personalized support based on ${student.name}'s learning profile`
        ]
      })),

      // Enhanced extensions
      extensions: [
        {
          title: `Advanced ${activeTheme} Challenge`,
          description: 'Enrichment activities for students who complete work early',
          difficulty: 'higher' as const,
          materials: ['Extension worksheets', 'Challenge cards', 'Creative supplies'],
          timeRequired: 10
        },
        {
          title: 'Peer Leadership Opportunity',
          description: 'Students can help teach concepts to classmates',
          difficulty: 'leadership' as const,
          materials: ['Teaching aids', 'Peer support cards'],
          timeRequired: 15
        }
      ],

      // Unified data references
      standardsAddressed: recommendation.standardsAddressed,
      iepGoalsAddressed: recommendation.iepGoalsAddressed,
      groupSize: recommendation.studentCount,
      staffRatio: `1:${recommendation.studentCount}`,
      
      // Enhanced setup and cleanup
      setupInstructions: [
        recommendation.recommendedActivity.setup,
        'Prepare individualized materials for each student',
        'Set up data collection tools and observation sheets',
        'Arrange seating to support collaboration and individual needs',
        'Prepare theme-related visual supports and materials'
      ],
      cleanupInstructions: [
        'Students help organize materials by category',
        'Return items to designated unified storage locations',
        'Complete data collection documentation',
        'Prepare space for next scheduled activity',
        'Update student progress in unified system'
      ],

      // Enhanced data collection points
      dataCollectionPoints: recommendation.dataCollectionPlan.goalIds.map((goalId, index) => ({
        id: `data_point_${index}`,
        moment: recommendation.dataCollectionPlan.measurementMoments[index] || 'During activity',
        method: recommendation.dataCollectionPlan.collectionMethod,
        criteria: recommendation.dataCollectionPlan.successCriteria,
        iepGoalIds: [goalId],
        unifiedIntegration: {
          studentId: recommendation.iepGoalsAddressed.find(g => g.goalId === goalId)?.studentId,
          autoSync: true,
          dataFormat: 'unified_standard'
        }
      })),

      // Enhanced parent communication
      parentCommunication: `Your child participated in "${recommendation.groupName}" today as part of our ${activeTheme} learning theme. This small group activity was specifically designed to support their IEP goals while working on ${recommendation.standardsAddressed[0]?.standard.title || 'important academic skills'}. The AI-powered grouping showed a ${recommendation.confidence}% match for optimal learning outcomes. Your child demonstrated progress in their individualized goals and engaged positively with peers in this supportive learning environment.`,

      // Metadata
      generatedAt: new Date().toISOString(),
      lastModified: new Date().toISOString(),
      templateVersion: '2.0-unified',
      
      // Unified system integration
      unifiedIntegration: {
        activityId: `smart_group_${recommendation.id}`,
        recommendationId: recommendation.id,
        studentIds: recommendation.studentIds,
        linkedGoalIds: recommendation.dataCollectionPlan.goalIds,
        theme: activeTheme,
        confidence: recommendation.confidence,
        autoGenerated: true,
        dataCollectionEnabled: true
      }
    };

    console.log('‚úÖ Unified lesson plan generated successfully');
    return lessonPlan;

  } catch (error) {
    console.error('‚ùå Lesson plan generation failed:', error);
    throw new Error(`Failed to generate lesson plan: ${error.message}`);
  }
};

// =============================================================================
// HELPER FUNCTIONS
// =============================================================================

const generateDataCollectionDates = (scheduleEntry: any): string[] => {
  const dates = [];
  const startDate = new Date(scheduleEntry.startDate);
  
  // Generate
