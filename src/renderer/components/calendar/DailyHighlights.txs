import React, { useState, useEffect, useRef } from 'react';
import { 
  Student, 
  StaffMember,
  DailyCheckIn as DailyCheckInType,
  ActivityHighlight,
  Achievement,
  ScheduleVariation,
  PhotoUploadResult
} from '../../types';

interface DailyHighlightsProps {
  currentDate: Date;
  students: Student[];
  staff: StaffMember[];
  todayCheckIn: DailyCheckInType | null;
  selectedSchedule?: ScheduleVariation | null;
  onUpdateCheckIn: (checkIn: DailyCheckInType) => void;
}

interface SpecialEvent {
  id: string;
  title: string;
  type: 'fire-drill' | 'assembly' | 'picture-day' | 'early-dismissal' | 'field-trip' | 'holiday' | 'birthday' | 'custom';
  date: string; // YYYY-MM-DD
  time?: string; // HH:MM
  description: string;
  icon: string;
  color: string;
  isAllDay: boolean;
  location?: string;
  preparationNotes?: string;
  createdAt: string;
}

interface Holiday {
  name: string;
  date: string; // MM-DD format
  icon: string;
  color: string;
  description: string;
  isObserved: boolean; // Whether school observes this day
}

const DailyHighlights: React.FC<DailyHighlightsProps> = ({
  currentDate,
  students,
  staff,
  todayCheckIn,
  selectedSchedule,
  onUpdateCheckIn
}) => {
  // State management
  const [activeSection, setActiveSection] = useState<'overview' | 'birthdays' | 'events' | 'photos' | 'achievements'>('overview');
  const [specialEvents, setSpecialEvents] = useState<SpecialEvent[]>([]);
  const [todayHighlights, setTodayHighlights] = useState<ActivityHighlight[]>([]);
  const [achievements, setAchievements] = useState<Achievement[]>([]);
  const [showEventModal, setShowEventModal] = useState(false);
  const [editingEvent, setEditingEvent] = useState<SpecialEvent | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Built-in holidays (can be expanded)
  const holidays: Holiday[] = [
    { name: 'New Year\'s Day', date: '01-01', icon: '🎊', color: '#e74c3c', description: 'Welcome to a new year!', isObserved: true },
    { name: 'Martin Luther King Jr. Day', date: '01-15', icon: '✊', color: '#8e44ad', description: 'Honoring Dr. King\'s legacy', isObserved: true },
    { name: 'Valentine\'s Day', date: '02-14', icon: '💝', color: '#e91e63', description: 'Share kindness and friendship', isObserved: false },
    { name: 'Presidents\' Day', date: '02-19', icon: '🇺🇸', color: '#3498db', description: 'Honoring our nation\'s leaders', isObserved: true },
    { name: 'St. Patrick\'s Day', date: '03-17', icon: '🍀', color: '#27ae60', description: 'Irish heritage celebration', isObserved: false },
    { name: 'Earth Day', date: '04-22', icon: '🌍', color: '#2ecc71', description: 'Taking care of our planet', isObserved: false },
    { name: 'Memorial Day', date: '05-27', icon: '🎖️', color: '#e74c3c', description: 'Remembering our heroes', isObserved: true },
    { name: 'Independence Day', date: '07-04', icon: '🎆', color: '#3498db', description: 'Celebrating America\'s birthday', isObserved: true },
    { name: 'Labor Day', date: '09-02', icon: '⚒️', color: '#f39c12', description: 'Honoring workers everywhere', isObserved: true },
    { name: 'Halloween', date: '10-31', icon: '🎃', color: '#f39c12', description: 'Spooky fun and costumes!', isObserved: false },
    { name: 'Veterans Day', date: '11-11', icon: '🪖', color: '#e74c3c', description: 'Thanking our veterans', isObserved: true },
    { name: 'Thanksgiving', date: '11-28', icon: '🦃', color: '#d35400', description: 'Gratitude and family time', isObserved: true },
    { name: 'Christmas', date: '12-25', icon: '🎄', color: '#27ae60', description: 'Peace and joy celebration', isObserved: true }
  ];

  // Load data on component mount and date change
  useEffect(() => {
    loadSpecialEvents();
    loadTodayHighlights();
    loadAchievements();
  }, [currentDate]);

  // Helper functions
  const formatDate = (date: Date): string => {
    return date.toISOString().split('T')[0];
  };

  const formatDisplayDate = (date: Date): string => {
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      month: 'long',
      day: 'numeric'
    });
  };

  const getDateDaysFromToday = (date: Date): number => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const targetDate = new Date(date);
    targetDate.setHours(0, 0, 0, 0);
    const diffTime = targetDate.getTime() - today.getTime();
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  };

  // Data loading functions
  const loadSpecialEvents = () => {
    try {
      const saved = localStorage.getItem('specialEvents');
      if (saved) {
        setSpecialEvents(JSON.parse(saved));
      }
    } catch (error) {
      console.error('Error loading special events:', error);
    }
  };

  const loadTodayHighlights = () => {
    if (todayCheckIn?.yesterdayHighlights) {
      setTodayHighlights(todayCheckIn.yesterdayHighlights);
    }
  };

  const loadAchievements = () => {
    if (todayCheckIn?.achievements) {
      setAchievements(todayCheckIn.achievements);
    }
  };

  // Event management functions
  const saveSpecialEvents = (events: SpecialEvent[]) => {
    try {
      localStorage.setItem('specialEvents', JSON.stringify(events));
      setSpecialEvents(events);
    } catch (error) {
      console.error('Error saving special events:', error);
    }
  };

  const addSpecialEvent = (eventData: Omit<SpecialEvent, 'id' | 'createdAt'>) => {
    const newEvent: SpecialEvent = {
      ...eventData,
      id: `event_${Date.now()}`,
      createdAt: new Date().toISOString()
    };
    
    const updatedEvents = [...specialEvents, newEvent];
    saveSpecialEvents(updatedEvents);
  };

  const deleteSpecialEvent = (eventId: string) => {
    if (window.confirm('Delete this event?')) {
      const updatedEvents = specialEvents.filter(event => event.id !== eventId);
      saveSpecialEvents(updatedEvents);
    }
  };

  // Photo management
  const handlePhotoUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // Validate file
    if (!file.type.startsWith('image/')) {
      alert('Please select an image file');
      return;
    }

    if (file.size > 5 * 1024 * 1024) { // 5MB limit
      alert('Image file is too large. Please select a file under 5MB.');
      return;
    }

    setIsUploading(true);
    try {
      // Convert to base64
      const reader = new FileReader();
      reader.onload = (e) => {
        const dataUrl = e.target?.result as string;
        
        // Create new highlight
        const description = prompt('Describe this photo highlight:') || 'Photo from today\'s activities';
        const newHighlight: ActivityHighlight = {
          activityId: `photo_${Date.now()}`,
          activityName: 'Photo Highlight',
          photo: dataUrl,
          photoFileName: file.name,
          highlight: description,
          timestamp: new Date().toISOString(),
          category: 'milestone'
        };

        // Update today's check-in
        if (todayCheckIn) {
          const updatedHighlights = [...(todayCheckIn.yesterdayHighlights || []), newHighlight];
          const updatedCheckIn = {
            ...todayCheckIn,
            yesterdayHighlights: updatedHighlights,
            updatedAt: new Date().toISOString()
          };
          onUpdateCheckIn(updatedCheckIn);
          setTodayHighlights(updatedHighlights);
        }
        
        setIsUploading(false);
        if (fileInputRef.current) {
          fileInputRef.current.value = '';
        }
      };
      
      reader.onerror = () => {
        alert('Failed to process image. Please try again.');
        setIsUploading(false);
      };
      
      reader.readAsDataURL(file);
    } catch (error) {
      console.error('Photo upload error:', error);
      alert('Failed to upload photo. Please try again.');
      setIsUploading(false);
    }
  };

  // Get data for current date
  const getTodaysBirthdays = (): Student[] => {
    const today = formatDate(currentDate);
    return students.filter(student => {
      // For demo purposes, check if student name starts with certain letters for "birthdays"
      // In real implementation, this would check actual birth dates
      const monthDay = today.slice(5); // Get MM-DD
      return student.name.toLowerCase().startsWith('e') && monthDay === '07-28'; // Example: Emma's birthday today
    });
  };

  const getTodaysEvents = (): SpecialEvent[] => {
    const today = formatDate(currentDate);
    return specialEvents.filter(event => event.date === today);
  };

  const getUpcomingEvents = (): SpecialEvent[] => {
    const today = formatDate(currentDate);
    return specialEvents
      .filter(event => event.date > today)
      .sort((a, b) => a.date.localeCompare(b.date))
      .slice(0, 3);
  };

  const getTodaysHolidays = (): Holiday[] => {
    const monthDay = formatDate(currentDate).slice(5); // Get MM-DD
    return holidays.filter(holiday => holiday.date === monthDay);
  };

  const getUpcomingHolidays = (): Holiday[] => {
    const today = new Date(currentDate);
    const currentMonthDay = (today.getMonth() + 1).toString().padStart(2, '0') + '-' + today.getDate().toString().padStart(2, '0');
    
    return holidays
      .filter(holiday => {
        // Simple date comparison for upcoming holidays within next 30 days
        const [month, day] = holiday.date.split('-').map(Number);
        const holidayDate = new Date(today.getFullYear(), month - 1, day);
        const daysUntil = getDateDaysFromToday(holidayDate);
        return daysUntil > 0 && daysUntil <= 30;
      })
      .slice(0, 3);
  };

  const getWeekPreview = (): string => {
    if (selectedSchedule) {
      return `This week we're following the "${selectedSchedule.name}" schedule with ${selectedSchedule.activities.length} planned activities.`;
    }
    return "This week's schedule is ready for a great learning experience!";
  };

  // Component data
  const todaysBirthdays = getTodaysBirthdays();
  const todaysEvents = getTodaysEvents();
  const upcomingEvents = getUpcomingEvents();
  const todaysHolidays = getTodaysHolidays();
  const upcomingHolidays = getUpcomingHolidays();

  return (
    <div style={{ padding: '1rem' }}>
      {/* Header */}
      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
        <h3 style={{ 
          fontSize: '2.5rem', 
          marginBottom: '0.5rem',
          color: 'white',
          textShadow: '0 2px 4px rgba(0,0,0,0.3)'
        }}>
          🎉 Daily Highlights
        </h3>
        <p style={{ 
          fontSize: '1.3rem', 
          opacity: 0.9,
          color: 'white',
          marginBottom: '1rem'
        }}>
          {formatDisplayDate(currentDate)}
        </p>
      </div>

      {/* Section Navigation */}
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        gap: '0.5rem',
        marginBottom: '2rem',
        flexWrap: 'wrap'
      }}>
        {[
          { id: 'overview', icon: '📋', label: 'Overview' },
          { id: 'birthdays', icon: '🎂', label: 'Birthdays' },
          { id: 'events', icon: '🚨', label: 'Events' },
          { id: 'photos', icon: '📸', label: 'Photos' },
          { id: 'achievements', icon: '🏆', label: 'Achievements' }
        ].map(section => (
          <button
            key={section.id}
            onClick={() => setActiveSection(section.id as any)}
            style={{
              background: activeSection === section.id 
                ? 'rgba(255,255,255,0.3)' 
                : 'rgba(255,255,255,0.1)',
              border: activeSection === section.id 
                ? '2px solid rgba(255,255,255,0.5)' 
                : '2px solid rgba(255,255,255,0.2)',
              borderRadius: '12px',
              color: 'white',
              padding: '0.75rem 1rem',
              fontSize: '0.9rem',
              fontWeight: '600',
              cursor: 'pointer',
              backdropFilter: 'blur(10px)',
              transition: 'all 0.3s ease',
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem'
            }}
          >
            <span>{section.icon}</span>
            {section.label}
          </button>
        ))}
      </div>

      {/* Content Sections */}
      
      {/* Overview Section */}
      {activeSection === 'overview' && (
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
          gap: '1.5rem'
        }}>
          {/* Today's Special Items */}
          <div style={{
            background: 'rgba(255,255,255,0.15)',
            borderRadius: '16px',
            padding: '1.5rem',
            border: '2px solid rgba(255,255,255,0.2)'
          }}>
            <h4 style={{ fontSize: '1.5rem', marginBottom: '1rem', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
              ⭐ Today's Special
            </h4>
            
            {/* Birthdays */}
            {todaysBirthdays.length > 0 && (
              <div style={{ marginBottom: '1rem' }}>
                <div style={{ fontSize: '1.2rem', marginBottom: '0.5rem' }}>🎂 Birthdays:</div>
                {todaysBirthdays.map(student => (
                  <div key={student.id} style={{
                    background: 'rgba(255,215,0,0.2)',
                    borderRadius: '8px',
                    padding: '0.75rem',
                    marginBottom: '0.5rem',
                    border: '2px solid rgba(255,215,0,0.3)'
                  }}>
                    <span style={{ fontSize: '1.1rem', fontWeight: '600' }}>
                      🎉 Happy Birthday, {student.name}! 🎉
                    </span>
                  </div>
                ))}
              </div>
            )}

            {/* Events */}
            {todaysEvents.length > 0 && (
              <div style={{ marginBottom: '1rem' }}>
                <div style={{ fontSize: '1.2rem', marginBottom: '0.5rem' }}>📅 Events:</div>
                {todaysEvents.map(event => (
                  <div key={event.id} style={{
                    background: `${event.color}20`,
                    borderRadius: '8px',
                    padding: '0.75rem',
                    marginBottom: '0.5rem',
                    border: `2px solid ${event.color}40`
                  }}>
                    <div style={{ fontWeight: '600', marginBottom: '0.25rem' }}>
                      {event.icon} {event.title}
                    </div>
                    {event.time && (
                      <div style={{ fontSize: '0.9rem', opacity: 0.8 }}>
                        🕐 {event.time}
                      </div>
                    )}
                    <div style={{ fontSize: '0.9rem' }}>{event.description}</div>
                  </div>
                ))}
              </div>
            )}

            {/* Holidays */}
            {todaysHolidays.length > 0 && (
              <div style={{ marginBottom: '1rem' }}>
                <div style={{ fontSize: '1.2rem', marginBottom: '0.5rem' }}>🎊 Holidays:</div>
                {todaysHolidays.map(holiday => (
                  <div key={holiday.name} style={{
                    background: `${holiday.color}20`,
                    borderRadius: '8px',
                    padding: '0.75rem',
                    marginBottom: '0.5rem',
                    border: `2px solid ${holiday.color}40`
                  }}>
                    <div style={{ fontWeight: '600' }}>
                      {holiday.icon} {holiday.name}
                    </div>
                    <div style={{ fontSize: '0.9rem' }}>{holiday.description}</div>
                  </div>
                ))}
              </div>
            )}

            {/* Default message if nothing special */}
            {todaysBirthdays.length === 0 && todaysEvents.length === 0 && todaysHolidays.length === 0 && (
              <div style={{ textAlign: 'center', opacity: 0.7, fontSize: '1rem' }}>
                📅 No special events today - perfect for regular learning activities!
              </div>
            )}
          </div>

          {/* Week Preview */}
          <div style={{
            background: 'rgba(255,255,255,0.15)',
            borderRadius: '16px',
            padding: '1.5rem',
            border: '2px solid rgba(255,255,255,0.2)'
          }}>
            <h4 style={{ fontSize: '1.5rem', marginBottom: '1rem', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
              📋 This Week
            </h4>
            
            <div style={{ marginBottom: '1rem' }}>
              <div style={{ fontSize: '1rem', lineHeight: '1.5' }}>
                {getWeekPreview()}
              </div>
            </div>

            {/* Upcoming Events */}
            {upcomingEvents.length > 0 && (
              <div style={{ marginBottom: '1rem' }}>
                <div style={{ fontSize: '1.1rem', fontWeight: '600', marginBottom: '0.5rem' }}>
                  🔮 Coming Up:
                </div>
                {upcomingEvents.map(event => {
                  const daysAway = getDateDaysFromToday(new Date(event.date));
                  return (
                    <div key={event.id} style={{
                      fontSize: '0.9rem',
                      marginBottom: '0.25rem',
                      opacity: 0.9
                    }}>
                      • {event.icon} {event.title} ({daysAway === 1 ? 'tomorrow' : `in ${daysAway} days`})
                    </div>
                  );
                })}
              </div>
            )}

            {/* Upcoming Holidays */}
            {upcomingHolidays.length > 0 && (
              <div>
                <div style={{ fontSize: '1.1rem', fontWeight: '600', marginBottom: '0.5rem' }}>
                  🎊 Holiday Preview:
                </div>
                {upcomingHolidays.map(holiday => {
                  const [month, day] = holiday.date.split('-').map(Number);
                  const holidayDate = new Date(currentDate.getFullYear(), month - 1, day);
                  const daysAway = getDateDaysFromToday(holidayDate);
                  return (
                    <div key={holiday.name} style={{
                      fontSize: '0.9rem',
                      marginBottom: '0.25rem',
                      opacity: 0.9
                    }}>
                      • {holiday.icon} {holiday.name} ({daysAway === 1 ? 'tomorrow' : `in ${daysAway} days`})
                    </div>
                  );
                })}
              </div>
            )}
          </div>

          {/* Yesterday's Highlights */}
          <div style={{
            background: 'rgba(255,255,255,0.15)',
            borderRadius: '16px',
            padding: '1.5rem',
            border: '2px solid rgba(255,255,255,0.2)'
          }}>
            <h4 style={{ fontSize: '1.5rem', marginBottom: '1rem', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
              📸 Yesterday's Highlights
            </h4>
            
            {todayHighlights.length > 0 ? (
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',
                gap: '1rem'
              }}>
                {todayHighlights.slice(0, 4).map((highlight, index) => (
                  <div key={index} style={{
                    textAlign: 'center',
                    background: 'rgba(255,255,255,0.1)',
                    borderRadius: '12px',
                    padding: '1rem'
                  }}>
                    {highlight.photo ? (
                      <img
                        src={highlight.photo}
                        alt={highlight.highlight}
                        style={{
                          width: '80px',
                          height: '80px',
                          objectFit: 'cover',
                          borderRadius: '12px',
                          marginBottom: '0.5rem'
                        }}
                      />
                    ) : (
                      <div style={{
                        width: '80px',
                        height: '80px',
                        background: 'linear-gradient(145deg, #667eea, #764ba2)',
                        borderRadius: '12px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        fontSize: '2rem',
                        marginBottom: '0.5rem',
                        margin: '0 auto 0.5rem auto'
                      }}>
                        🌟
                      </div>
                    )}
                    <div style={{ fontSize: '0.8rem', lineHeight: '1.3' }}>
                      {highlight.highlight}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div style={{ textAlign: 'center', opacity: 0.7 }}>
                <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>📷</div>
                <div>No highlights captured yet. Add some memories!</div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Photos Section */}
      {activeSection === 'photos' && (
        <div>
          <div style={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: '2rem'
          }}>
            <h4 style={{ fontSize: '2rem', margin: 0 }}>📸 Photo Highlights</h4>
            <div>
              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                style={{ display: 'none' }}
                onChange={handlePhotoUpload}
                disabled={isUploading}
              />
              <button
                onClick={() => fileInputRef.current?.click()}
                disabled={isUploading}
                style={{
                  background: 'linear-gradient(145deg, #28a745, #20c997)',
                  border: 'none',
                  color: 'white',
                  padding: '1rem 2rem',
                  borderRadius: '12px',
                  fontSize: '1rem',
                  fontWeight: '600',
                  cursor: isUploading ? 'not-allowed' : 'pointer',
                  boxShadow: '0 4px 15px rgba(40, 167, 69, 0.3)'
                }}
              >
                {isUploading ? '📤 Uploading...' : '📷 Add Photo'}
              </button>
            </div>
          </div>

          {todayHighlights.length > 0 ? (
            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
              gap: '2rem'
            }}>
              {todayHighlights.map((highlight, index) => (
                <div key={index} style={{
                  background: 'rgba(255,255,255,0.15)',
                  borderRadius: '16px',
                  padding: '1.5rem',
                  border: '2px solid rgba(255,255,255,0.2)'
                }}>
                  {highlight.photo ? (
                    <img
                      src={highlight.photo}
                      alt={highlight.highlight}
                      style={{
                        width: '100%',
                        height: '200px',
                        objectFit: 'cover',
                        borderRadius: '12px',
                        marginBottom: '1rem'
                      }}
                    />
                  ) : (
                    <div style={{
                      width: '100%',
                      height: '200px',
                      background: 'linear-gradient(145deg, #667eea, #764ba2)',
                      borderRadius: '12px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '4rem',
                      marginBottom: '1rem'
                    }}>
                      🌟
                    </div>
                  )}
                  <div style={{
                    fontSize: '1.1rem',
                    lineHeight: '1.4',
                    fontWeight: '600',
                    marginBottom: '0.5rem'
                  }}>
                    {highlight.highlight}
                  </div>
                  <div style={{
                    fontSize: '0.9rem',
                    opacity: 0.8
                  }}>
                    {highlight.activityName} • {new Date(highlight.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div style={{
              textAlign: 'center',
              padding: '4rem',
              background: 'rgba(255,255,255,0.1)',
              borderRadius: '16px'
            }}>
              <div style={{ fontSize: '5rem', marginBottom: '1rem' }}>📷</div>
              <h5 style={{ fontSize: '1.5rem', marginBottom: '1rem' }}>No Photos Yet</h5>
              <p style={{ fontSize: '1.1rem', opacity: 0.8, marginBottom: '2rem' }}>
                Capture today's special moments and achievements!
              </p>
              <button
                onClick={() => fileInputRef.current?.click()}
                style={{
                  background: 'linear-gradient(145deg, #28a745, #20c997)',
                  border: 'none',
                  color: 'white',
                  padding: '1rem 2rem',
                  borderRadius: '12px',
                  fontSize: '1.1rem',
                  fontWeight: '600',
                  cursor: 'pointer',
                  boxShadow: '0 4px 15px rgba(40, 167, 69, 0.3)'
                }}
              >
                📷 Add First Photo
              </button>
            </div>
          )}
        </div>
      )}

      {/* Events Section */}
      {activeSection === 'events' && (
        <div>
          <div style={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: '2rem'
          }}>
            <h4 style={{ fontSize: '2rem', margin: 0 }}>🚨 Special Events</h4>
            <button
              onClick={() => setShowEventModal(true)}
              style={{
                background: 'linear-gradient(145deg, #007bff, #0056b3)',
                border: 'none',
                color: 'white',
                padding: '1rem 2rem',
                borderRadius: '12px',
                fontSize: '1rem',
                fontWeight: '600',
                cursor: 'pointer',
                boxShadow: '0 4px 15px rgba(0, 123, 255, 0.3)'
              }}
            >
              ➕ Add Event
            </button>
          </div>

          {/* Today's Events */}
          {todaysEvents.length > 0 && (
            <div style={{ marginBottom: '2rem' }}>
              <h5 style={{ fontSize: '1.5rem', marginBottom: '1rem' }}>📅 Today's Events</h5>
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
                gap: '1rem'
              }}>
                {todaysEvents.map(event => (
                  <div key={event.id} style={{
                    background: `${event.color}20`,
                    borderRadius: '16px',
                    padding: '1.5rem',
                    border: `3px solid ${event.color}40`,
                    position: 'relative'
                  }}>
                    <div style={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'flex-start',
                      marginBottom: '1rem'
                    }}>
                      <div style={{ fontSize: '2rem' }}>{event.icon}</div>
                      <button
                        onClick={() => deleteSpecialEvent(event.id)}
                        style={{
                          background: 'rgba(220, 53, 69, 0.8)',
                          border: 'none',
                          borderRadius: '50%',
                          width: '30px',
                          height: '30px',
                          color: 'white',
                          fontSize: '1rem',
                          cursor: 'pointer'
                        }}
                      >
                        ×
                      </button>
                    </div>
                    <h6 style={{
                      fontSize: '1.3rem',
                      fontWeight: '700',
                      marginBottom: '0.5rem',
                      color: 'white'
                    }}>
                      {event.title}
                    </h6>
                    {event.time && (
                      <div style={{
                        fontSize: '1.1rem',
                        marginBottom: '0.5rem',
                        fontWeight: '600'
                      }}>
                        🕐 {event.time}
                      </div>
                    )}
                    <div style={{
                      fontSize: '1rem',
                      lineHeight: '1.4',
                      marginBottom: '0.5rem'
                    }}>
                      {event.description}
                    </div>
                    {event.location && (
                      <div style={{
                        fontSize: '0.9rem',
                        opacity: 0.9
                      }}>
                        📍 {event.location}
                      </div>
                    )}
                    {event.preparationNotes && (
                      <div style={{
                        background: 'rgba(255,255,255,0.2)',
                        borderRadius: '8px',
                        padding: '0.75rem',
                        marginTop: '1rem',
                        fontSize: '0.9rem'
                      }}>
                        <strong>📝 Prep Notes:</strong> {event.preparationNotes}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Upcoming Events */}
          {upcomingEvents.length > 0 && (
            <div style={{ marginBottom: '2rem' }}>
              <h5 style={{ fontSize: '1.5rem', marginBottom: '1rem' }}>🔮 Upcoming Events</h5>
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
                gap: '1rem'
              }}>
                {upcomingEvents.map(event => {
                  const daysAway = getDateDaysFromToday(new Date(event.date));
                  return (
                    <div key={event.id} style={{
                      background: 'rgba(255,255,255,0.1)',
                      borderRadius: '16px',
                      padding: '1.5rem',
                      border: '2px solid rgba(255,255,255,0.2)',
                      position: 'relative'
                    }}>
                      <div style={{
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'flex-start',
                        marginBottom: '1rem'
                      }}>
                        <div style={{ fontSize: '1.8rem' }}>{event.icon}</div>
                        <div style={{
                          background: 'linear-gradient(145deg, #28a745, #20c997)',
                          borderRadius: '12px',
                          padding: '0.25rem 0.75rem',
                          fontSize: '0.8rem',
                          fontWeight: '600'
                        }}>
                          {daysAway === 1 ? 'Tomorrow' : `${daysAway} days`}
                        </div>
                      </div>
                      <h6 style={{
                        fontSize: '1.2rem',
                        fontWeight: '700',
                        marginBottom: '0.5rem',
                        color: 'white'
                      }}>
                        {event.title}
                      </h6>
                      <div style={{
                        fontSize: '0.9rem',
                        marginBottom: '0.5rem',
                        opacity: 0.9
                      }}>
                        📅 {new Date(event.date).toLocaleDateString('en-US', { 
                          weekday: 'long', 
                          month: 'long', 
                          day: 'numeric' 
                        })}
                      </div>
                      <div style={{
                        fontSize: '1rem',
                        lineHeight: '1.4'
                      }}>
                        {event.description}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          )}

          {/* All Events List */}
          <div>
            <h5 style={{ fontSize: '1.5rem', marginBottom: '1rem' }}>📋 All Events</h5>
            {specialEvents.length > 0 ? (
              <div style={{
                background: 'rgba(255,255,255,0.1)',
                borderRadius: '16px',
                padding: '1.5rem'
              }}>
                {specialEvents
                  .sort((a, b) => a.date.localeCompare(b.date))
                  .map(event => {
                    const eventDate = new Date(event.date);
                    const isToday = formatDate(eventDate) === formatDate(currentDate);
                    const isPast = eventDate < currentDate;
                    
                    return (
                      <div key={event.id} style={{
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                        padding: '1rem',
                        marginBottom: '1rem',
                        background: isToday 
                          ? 'rgba(255, 215, 0, 0.2)' 
                          : isPast 
                          ? 'rgba(108, 117, 125, 0.2)'
                          : 'rgba(255,255,255,0.1)',
                        borderRadius: '12px',
                        border: isToday ? '2px solid rgba(255, 215, 0, 0.5)' : '1px solid rgba(255,255,255,0.2)',
                        opacity: isPast ? 0.7 : 1
                      }}>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>
                          <span style={{ fontSize: '1.5rem' }}>{event.icon}</span>
                          <div>
                            <div style={{ fontWeight: '600', fontSize: '1.1rem' }}>
                              {event.title}
                              {isToday && <span style={{ color: '#FFD700', marginLeft: '0.5rem' }}>• TODAY</span>}
                            </div>
                            <div style={{ fontSize: '0.9rem', opacity: 0.8 }}>
                              {eventDate.toLocaleDateString('en-US', { 
                                weekday: 'long', 
                                month: 'long', 
                                day: 'numeric' 
                              })}
                              {event.time && ` at ${event.time}`}
                            </div>
                          </div>
                        </div>
                        <button
                          onClick={() => deleteSpecialEvent(event.id)}
                          style={{
                            background: 'rgba(220, 53, 69, 0.8)',
                            border: 'none',
                            borderRadius: '8px',
                            color: 'white',
                            padding: '0.5rem 1rem',
                            fontSize: '0.9rem',
                            cursor: 'pointer'
                          }}
                        >
                          Delete
                        </button>
                      </div>
                    );
                  })}
              </div>
            ) : (
              <div style={{
                textAlign: 'center',
                padding: '3rem',
                background: 'rgba(255,255,255,0.1)',
                borderRadius: '16px'
              }}>
                <div style={{ fontSize: '4rem', marginBottom: '1rem' }}>📅</div>
                <h6 style={{ fontSize: '1.5rem', marginBottom: '1rem' }}>No Events Scheduled</h6>
                <p style={{ fontSize: '1rem', opacity: 0.8 }}>
                  Add fire drills, assemblies, field trips, and other special events.
                </p>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Birthdays Section */}
      {activeSection === 'birthdays' && (
        <div>
          <h4 style={{ fontSize: '2rem', marginBottom: '2rem' }}>🎂 Birthday Celebrations</h4>
          
          {/* Today's Birthdays */}
          {todaysBirthdays.length > 0 ? (
            <div style={{ marginBottom: '3rem' }}>
              <h5 style={{ fontSize: '1.8rem', marginBottom: '1.5rem', textAlign: 'center' }}>
                🎉 Today's Birthday Celebrations! 🎉
              </h5>
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
                gap: '2rem'
              }}>
                {todaysBirthdays.map(student => (
                  <div key={student.id} style={{
                    background: 'linear-gradient(145deg, rgba(255,215,0,0.3), rgba(255,165,0,0.2))',
                    borderRadius: '20px',
                    padding: '2rem',
                    border: '3px solid rgba(255,215,0,0.5)',
                    textAlign: 'center',
                    position: 'relative',
                    overflow: 'hidden'
                  }}>
                    {/* Celebration Background */}
                    <div style={{
                      position: 'absolute',
                      top: 0,
                      left: 0,
                      right: 0,
                      bottom: 0,
                      background: 'url("data:image/svg+xml,%3Csvg width="60" height="60" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg"%3E%3Cg fill="none" fill-rule="evenodd"%3E%3Cg fill="%23FFD700" fill-opacity="0.1"%3E%3Ccircle cx="30" cy="30" r="4"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")',
                      animation: 'sparkle 2s ease-in-out infinite'
                    }} />
                    
                    <div style={{ position: 'relative', zIndex: 2 }}>
                      {/* Student Photo */}
                      <div style={{
                        width: '120px',
                        height: '120px',
                        borderRadius: '50%',
                        overflow: 'hidden',
                        background: student.photo 
                          ? 'transparent' 
                          : 'linear-gradient(145deg, #FFD700, #FFA500)',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        margin: '0 auto 1.5rem auto',
                        border: '4px solid #FFD700',
                        boxShadow: '0 8px 32px rgba(255, 215, 0, 0.4)'
                      }}>
                        {student.photo ? (
                          <img
                            src={student.photo}
                            alt={student.name}
                            style={{
                              width: '100%',
                              height: '100%',
                              objectFit: 'cover'
                            }}
                          />
                        ) : (
                          <span style={{
                            fontSize: '3rem',
                            color: 'white',
                            fontWeight: '700'
                          }}>
                            🎂
                          </span>
                        )}
                      </div>

                      <h6 style={{
                        fontSize: '2rem',
                        fontWeight: '700',
                        marginBottom: '1rem',
                        color: 'white',
                        textShadow: '0 2px 4px rgba(0,0,0,0.3)'
                      }}>
                        Happy Birthday, {student.name}!
                      </h6>

                      <div style={{
                        fontSize: '1.5rem',
                        marginBottom: '1.5rem'
                      }}>
                        🎂🎉🎈🎁🎊
                      </div>

                      <div style={{
                        background: 'rgba(255,255,255,0.2)',
                        borderRadius: '12px',
                        padding: '1rem',
                        fontSize: '1.1rem',
                        lineHeight: '1.4'
                      }}>
                        Let's make this a special day for {student.name} with birthday songs, 
                        special recognition, and celebration activities!
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <div style={{
              textAlign: 'center',
              padding: '3rem',
              background: 'rgba(255,255,255,0.1)',
              borderRadius: '16px',
              marginBottom: '2rem'
            }}>
              <div style={{ fontSize: '4rem', marginBottom: '1rem' }}>🎂</div>
              <h6 style={{ fontSize: '1.5rem', marginBottom: '1rem' }}>No Birthdays Today</h6>
              <p style={{ fontSize: '1rem', opacity: 0.8 }}>
                But every day is special for learning and growing together!
              </p>
            </div>
          )}

          {/* All Students Birthday List */}
          <div>
            <h5 style={{ fontSize: '1.5rem', marginBottom: '1.5rem' }}>👥 Student Birthday Calendar</h5>
            <div style={{
              background: 'rgba(255,255,255,0.1)',
              borderRadius: '16px',
              padding: '2rem'
            }}>
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
                gap: '1rem'
              }}>
                {students.map(student => (
                  <div key={student.id} style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '1rem',
                    padding: '1rem',
                    background: 'rgba(255,255,255,0.1)',
                    borderRadius: '12px',
                    border: '1px solid rgba(255,255,255,0.2)'
                  }}>
                    <div style={{
                      width: '50px',
                      height: '50px',
                      borderRadius: '50%',
                      overflow: 'hidden',
                      background: student.photo 
                        ? 'transparent' 
                        : 'linear-gradient(145deg, #667eea, #764ba2)',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center'
                    }}>
                      {student.photo ? (
                        <img
                          src={student.photo}
                          alt={student.name}
                          style={{
                            width: '100%',
                            height: '100%',
                            objectFit: 'cover'
                          }}
                        />
                      ) : (
                        <span style={{
                          fontSize: '1.5rem',
                          color: 'white',
                          fontWeight: '700'
                        }}>
                          {student.name.split(' ').map(n => n[0]).join('')}
                        </span>
                      )}
                    </div>
                    <div>
                      <div style={{ fontWeight: '600', fontSize: '1.1rem' }}>
                        {student.name}
                      </div>
                      <div style={{ fontSize: '0.9rem', opacity: 0.8 }}>
                        🎂 Birthday info not set
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              <div style={{
                textAlign: 'center',
                marginTop: '2rem',
                padding: '1rem',
                background: 'rgba(255,255,255,0.1)',
                borderRadius: '12px',
                fontSize: '0.9rem',
                opacity: 0.8
              }}>
                💡 Tip: Birthday dates can be added in Student Management for automatic birthday tracking!
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Achievements Section */}
      {activeSection === 'achievements' && (
        <div>
          <h4 style={{ fontSize: '2rem', marginBottom: '2rem' }}>🏆 Achievements & Celebrations</h4>
          
          {achievements.length > 0 ? (
            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
              gap: '1.5rem'
            }}>
              {achievements.map(achievement => {
                const student = students.find(s => s.id === achievement.studentId);
                return (
                  <div key={achievement.id} style={{
                    background: 'linear-gradient(145deg, rgba(255,215,0,0.2), rgba(255,165,0,0.1))',
                    borderRadius: '16px',
                    padding: '1.5rem',
                    border: '2px solid rgba(255,215,0,0.3)'
                  }}>
                    <div style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '1rem',
                      marginBottom: '1rem'
                    }}>
                      <div style={{ fontSize: '2.5rem' }}>{achievement.icon}</div>
                      <div>
                        <h6 style={{
                          fontSize: '1.3rem',
                          fontWeight: '700',
                          marginBottom: '0.25rem',
                          color: 'white'
                        }}>
                          {achievement.title}
                        </h6>
                        <div style={{
                          fontSize: '1rem',
                          fontWeight: '600',
                          color: '#FFD700'
                        }}>
                          {student?.name || 'Student'}
                        </div>
                      </div>
                    </div>
                    <div style={{
                      fontSize: '1rem',
                      lineHeight: '1.4',
                      marginBottom: '1rem'
                    }}>
                      {achievement.description}
                    </div>
                    <div style={{
                      fontSize: '0.9rem',
                      opacity: 0.8
                    }}>
                      🕐 {new Date(achievement.date).toLocaleDateString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </div>
                  </div>
                );
              })}
            </div>
          ) : (
            <div style={{
              textAlign: 'center',
              padding: '4rem',
              background: 'rgba(255,255,255,0.1)',
              borderRadius: '16px'
            }}>
              <div style={{ fontSize: '5rem', marginBottom: '1rem' }}>🏆</div>
              <h5 style={{ fontSize: '1.5rem', marginBottom: '1rem' }}>No Achievements Yet</h5>
              <p style={{ fontSize: '1.1rem', opacity: 0.8, marginBottom: '2rem' }}>
                Achievements from behavior commitments and special moments will appear here!
              </p>
              <div style={{
                background: 'rgba(255,255,255,0.1)',
                borderRadius: '12px',
                padding: '1.5rem',
                fontSize: '1rem',
                lineHeight: '1.5'
              }}>
                💡 <strong>Tip:</strong> Achievements are automatically created when students complete their 
                behavior commitments or when you capture special photo moments!
              </div>
            </div>
          )}
        </div>
      )}

      {/* Event Creation Modal */}
      {showEventModal && (
        <EventModal
          onClose={() => {
            setShowEventModal(false);
            setEditingEvent(null);
          }}
          onSave={(eventData) => {
            addSpecialEvent(eventData);
            setShowEventModal(false);
          }}
          currentDate={currentDate}
        />
      )}

      <style>{`
        @keyframes sparkle {
          0%, 100% { opacity: 0.3; transform: scale(1); }
          50% { opacity: 0.8; transform: scale(1.1); }
        }
      `}</style>
    </div>
  );
};

// Event Creation Modal Component
interface EventModalProps {
  onClose: () => void;
  onSave: (eventData: Omit<SpecialEvent, 'id' | 'createdAt'>) => void;
  currentDate: Date;
}

const EventModal: React.FC<EventModalProps> = ({ onClose, onSave, currentDate }) => {
  const [formData, setFormData] = useState({
    title: '',
    type: 'custom' as SpecialEvent['type'],
    date: currentDate.toISOString().split('T')[0],
    time: '',
    description: '',
    location: '',
    preparationNotes: '',
    isAllDay: false
  });

  const eventTypes = [
    { id: 'fire-drill', name: 'Fire Drill', icon: '🚨', color: '#e74c3c' },
    { id: 'assembly', name: 'Assembly', icon: '🎭', color: '#9b59b6' },
    { id: 'picture-day', name: 'Picture Day', icon: '📸', color: '#f39c12' },
    { id: 'early-dismissal', name: 'Early Dismissal', icon: '🏃', color: '#e67e22' },
    { id: 'field-trip', name: 'Field Trip', icon: '🚌', color: '#27ae60' },
    { id: 'holiday', name: 'Holiday', icon: '🎊', color: '#e91e63' },
    { id: 'birthday', name: 'Birthday', icon: '🎂', color: '#f1c40f' },
    { id: 'custom', name: 'Custom Event', icon: '📅', color: '#3498db' }
  ];

  const selectedType = eventTypes.find(type => type.id === formData.type) || eventTypes[7];

  const handleSubmit = () => {
    if (!formData.title.trim()) {
      alert('Please enter an event title');
      return;
    }

    onSave({
      title: formData.title.trim(),
      type: formData.type,
      date: formData.date,
      time: formData.time || undefined,
      description: formData.description.trim() || selectedType.name,
      icon: selectedType.icon,
      color: selectedType.color,
      isAllDay: formData.isAllDay,
      location: formData.location.trim() || undefined,
      preparationNotes: formData.preparationNotes.trim() || undefined
    });
  };

  return (
    <div style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      background: 'rgba(0,0,0,0.7)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 1000,
      backdropFilter: 'blur(5px)'
    }}>
      <div style={{
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        borderRadius: '20px',
        padding: '2rem',
        maxWidth: '500px',
        width: '90%',
        maxHeight: '90vh',
        overflowY: 'auto',
        color: 'white'
      }}>
        <div style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          marginBottom: '2rem'
        }}>
          <h3 style={{ margin: 0, fontSize: '1.8rem' }}>🚨 Add Special Event</h3>
          <button
            onClick={onClose}
            style={{
              background: 'rgba(255,255,255,0.2)',
              border: 'none',
              borderRadius: '50%',
              width: '40px',
              height: '40px',
              color: 'white',
              fontSize: '1.5rem',
              cursor: 'pointer'
            }}
          >
            ×
          </button>
        </div>

        {/* Event Type Selection */}
        <div style={{ marginBottom: '1.5rem' }}>
          <label style={{ fontSize: '1.1rem', fontWeight: '600', marginBottom: '0.5rem', display: 'block' }}>
            Event Type
          </label>
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',
            gap: '0.5rem'
          }}>
            {eventTypes.map(type => (
              <button
                key={type.id}
                onClick={() => setFormData(prev => ({ ...prev, type: type.id }))}
                style={{
                  background: formData.type === type.id 
                    ? `${type.color}40` 
                    : 'rgba(255,255,255,0.1)',
                  border: formData.type === type.id 
                    ? `2px solid ${type.color}` 
                    : '2px solid rgba(255,255,255,0.2)',
                  borderRadius: '12px',
                  color: 'white',
                  padding: '0.75rem',
                  fontSize: '0.9rem',
                  cursor: 'pointer',
                  textAlign: 'center'
                }}
              >
                <div style={{ fontSize: '1.5rem', marginBottom: '0.25rem' }}>{type.icon}</div>
                <div style={{ fontSize: '0.8rem' }}>{type.name}</div>
              </button>
            ))}
          </div>
        </div>

        {/* Form Fields */}
        <div style={{ marginBottom: '1.5rem' }}>
          <label style={{ fontSize: '1.1rem', fontWeight: '600', marginBottom: '0.5rem', display: 'block' }}>
            Event Title *
          </label>
          <input
            type="text"
            value={formData.title}
            onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
            placeholder="Enter event title"
            style={{
              width: '100%',
              padding: '0.75rem',
              borderRadius: '8px',
              border: '2px solid rgba(255,255,255,0.3)',
              background: 'rgba(255,255,255,0.1)',
              color: 'white',
              fontSize: '1rem'
            }}
          />
        </div>

        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem', marginBottom: '1.5rem' }}>
          <div>
            <label style={{ fontSize: '1.1rem', fontWeight: '600', marginBottom: '0.5rem', display: 'block' }}>
              Date
            </label>
            <input
              type="date"
              value={formData.date}
              onChange={(e) => setFormData(prev => ({ ...prev, date: e.target.value }))}
              style={{
                width: '100%',
                padding: '0.75rem',
                borderRadius: '8px',
                border: '2px solid rgba(255,255,255,0.3)',
                background: 'rgba(255,255,255,0.9)',
                color: 'black',
                fontSize: '1rem'
              }}
            />
          </div>

          <div>
            <label style={{ fontSize: '1.1rem', fontWeight: '600', marginBottom: '0.5rem', display: 'block' }}>
              Time (optional)
            </label>
            <input
              type="time"
              value={formData.time}
              onChange={(e) => setFormData(prev => ({ ...prev, time: e.target.value }))}
              style={{
                width: '100%',
                padding: '0.75rem',
                borderRadius: '8px',
                border: '2px solid rgba(255,255,255,0.3)',
                background: 'rgba(255,255,255,0.9)',
                color: 'black',
                fontSize: '1rem'
              }}
            />
          </div>
        </div>

        <div style={{ marginBottom: '1.5rem' }}>
          <label style={{ fontSize: '1.1rem', fontWeight: '600', marginBottom: '0.5rem', display: 'block' }}>
            Description
          </label>
          <textarea
            value={formData.description}
            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
            placeholder="Describe the event..."
            rows={3}
            style={{
              width: '100%',
              padding: '0.75rem',
              borderRadius: '8px',
              border: '2px solid rgba(255,255,255,0.3)',
              background: 'rgba(255,255,255,0.1)',
              color: 'white',
              fontSize: '1rem',
              resize: 'vertical'
            }}
          />
        </div>

        <div style={{ marginBottom: '1.5rem' }}>
          <label style={{ fontSize: '1.1rem', fontWeight: '600', marginBottom: '0.5rem', display: 'block' }}>
            Location (optional)
          </label>
          <input
            type="text"
            value={formData.location}
            onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}
            placeholder="Event location"
            style={{
              width: '100%',
              padding: '0.75rem',
              borderRadius: '8px',
              border: '2px solid rgba(255,255,255,0.3)',
              background: 'rgba(255,255,255,0.1)',
              color: 'white',
              fontSize: '1rem'
            }}
          />
        </div>

        <div style={{ marginBottom: '1.5rem' }}>
          <label style={{ fontSize: '1.1rem', fontWeight: '600', marginBottom: '0.5rem', display: 'block' }}>
            Preparation Notes (optional)
          </label>
          <textarea
            value={formData.preparationNotes}
            onChange={(e) => setFormData(prev => ({ ...prev, preparationNotes: e.target.value }))}
            placeholder="What should teachers prepare for this event?"
            rows={2}
            style={{
              width: '100%',
              padding: '0.75rem',
              borderRadius: '8px',
              border: '2px solid rgba(255,255,255,0.3)',
              background: 'rgba(255,255,255,0.1)',
              color: 'white',
              fontSize: '1rem',
              resize: 'vertical'
            }}
          />
        </div>

        <div style={{ marginBottom: '2rem' }}>
          <label style={{
            display: 'flex',
            alignItems: 'center',
            gap: '0.5rem',
            cursor: 'pointer'
          }}>
            <input
              type="checkbox"
              checked={formData.isAllDay}
              onChange={(e) => setFormData(prev => ({ ...prev, isAllDay: e.target.checked }))}
            />
            <span style={{ fontSize: '1rem' }}>All day event</span>
          </label>
        </div>

        {/* Action Buttons */}
        <div style={{
          display: 'flex',
          justifyContent: 'flex-end',
          gap: '1rem'
        }}>
          <button
            onClick={onClose}
            style={{
              background: 'rgba(255,255,255,0.2)',
              border: '2px solid rgba(255,255,255,0.3)',
              borderRadius: '12px',
              color: 'white',
              padding: '0.75rem 1.5rem',
              fontSize: '1rem',
              cursor: 'pointer',
              fontWeight: '600'
            }}
          >
            Cancel
          </button>
          <button
            onClick={handleSubmit}
            style={{
              background: `linear-gradient(145deg, ${selectedType.color}, ${selectedType.color}CC)`,
              border: 'none',
              borderRadius: '12px',
              color: 'white',
              padding: '0.75rem 1.5rem',
              fontSize: '1rem',
              cursor: 'pointer',
              fontWeight: '600',
              boxShadow: `0 4px 15px ${selectedType.color}40`
            }}
          >
            {selectedType.icon} Add Event
          </button>
        </div>
      </div>
    </div>
  );
};

export default DailyHighlights;